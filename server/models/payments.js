const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const PaymentSchema = new Schema(
  {
    isSkipped: { type: Boolean, default: false },
    isUpdated: { type: Boolean, default: false },
    transactionId: { type: String },
    paymentSkippedDate: { type: Date, default: null },
    skippedMessage: { type: String },
    subscriptionNumber: { type: String },
    transientNumber: { type: String },
    purpose: { type: String, index: true },
    customerId: { type: Schema.Types.ObjectId, ref: "customers" },
    placeId: { type: Schema.Types.ObjectId, ref: "places", index: true },
    subscriptionId: { type: Schema.Types.ObjectId, ref: "subscriptions" },
    shortlyId: { type: String },
    receiptURL: { type: String },
    stripeCustomerId: { type: String },
    authorizenetCustomerId: { type: String },
    paymentMethodId: { type: String },
    paymentMethodType: { type: String },
    paymentStatus: { type: String, default: "failed", index: true },
    cardLastFourDigit: { type: String },
    licensePlate: [
      {
        licensePlateNumber: { type: String },
        assignName: { type: String },
        price: { type: Number },
        status: { type: Number, default: 10 },
        externalKey: { type: String },
        ballparkValidateDate: { type: Date },
      },
    ],
    isApplyTax: { type: Boolean, default: false },
    isMonthly: { type: Boolean, default: false },
    isApplyServiceFee: { type: Boolean, default: false },
    isApplyTaxOnServiceFee: { type: Boolean, default: false },
    paymentGatewayFeePayBy: { type: String },
    baseRate: { type: Number, required: true, default: 0 },
    tax: { type: Number, required: true, default: 0 },
    taxPercentage: { type: Number, required: true, default: 0 },
    cityTax: { type: Number, required: true, default: 0 },
    cityTaxPercentage: { type: Number, required: true, default: 0 },
    countyTax: { type: Number, required: true, default: 0 },
    countyTaxPercentage: { type: Number, required: true, default: 0 },
    serviceFee: { type: Number, required: true, default: 0 },
    ownerPayout: { type: Number, required: true, default: 0 },
    spotsyncRevenue: { type: Number, required: true, default: 0 },
    applicationFee: { type: Number, required: true, default: 0 },
    paymentGatewayFee: { type: Number, required: true, default: 0 },
    totalAmount: { type: Number, default: 0 },
    status: { type: Number, default: 10 },
    paymentInfo: { type: Object },
    refundedAgainst: { type: Schema.Types.ObjectId, ref: "payments" },
    isClientFault: { type: Boolean },
    isFullyRefunded: { type: Boolean, default: false },
    isDirectCharge: { type: Boolean, default: false },
    connectAccountId: { type: String },
    transactionDate: { type: Date, default: null },
  },
  { timestamps: true }
);

module.exports = Notification = mongoose.model("payments", PaymentSchema);
